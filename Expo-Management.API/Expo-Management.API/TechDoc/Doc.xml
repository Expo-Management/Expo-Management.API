<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Expo-Management.API</name>
    </assembly>
    <members>
        <member name="T:Expo_Management.API.Controllers.AdminController">
            <summary>
            Controlador de administrador
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.AdminController.ShutDownSystem">
            <summary>
            Endpoint para dar de baja el sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.AuthenticateController">
            <summary>
            Controlador de autenticaci칩n
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.#ctor(Expo_Management.API.Application.Contracts.Repositories.IIdentityRepository,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Expo_Management.API.Controllers.AuthenticateController})">
            <summary>
            Constructor del controlador de autenticaci칩n
            </summary>
            <param name="identityRepository"></param>
            <param name="configuration"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.RefreshToken(Expo_Management.API.Domain.Models.Entities.TokenModel)">
            <summary>
            Endpoint para refrescar el token del usuario logueado
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.Login(Expo_Management.API.Domain.Models.ViewModels.LoginViewModel)">
            <summary>
            Endpoint para logearse en el sistema
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.Register(Expo_Management.API.Domain.Models.InputModels.RegisterInputModel)">
            <summary>
            Endpoint para registrarse en el sistema
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.RegisterAdmin(Expo_Management.API.Domain.Models.InputModels.RegisterInputModel)">
            <summary>
            Enpoint para registrar un profesor en el sistema
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.RegisterJudge(Expo_Management.API.Domain.Models.InputModels.RegisterInputModel)">
            <summary>
            Endpoint para registrar un juez en el sistema
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.confirmEmailToken(System.String,System.String)">
            <summary>
            Endpoint para confirmar el emailToken
            </summary>
            <param name="userId"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.ForgetPassword(System.String,System.String)">
            <summary>
            Endpoint para solicitar un cambio de contrase침a
            </summary>
            <param name="email"></param>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.AuthenticateController.ResetPassword(Expo_Management.API.Domain.Models.ViewModels.ResetPasswordViewModel)">
            <summary>
            Endpoint para cambiar la contrase침a
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.CategoryController">
            <summary>
            Controlador de categorias
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.CategoryController.#ctor(Expo_Management.API.Application.Contracts.Repositories.ICategoryRepository)">
            <summary>
            Constructor del controlador de categorias
            </summary>
            <param name="categoryRepository"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.CategoryController.CreateCategoryAsync(Expo_Management.API.Domain.Models.InputModels.NewCategoryInputModel)">
            <summary>
            Endpoinr para crear categorias
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.CategoryController.GetCategoryAsync(System.Int32)">
            <summary>
            Endpoint para obtener una categoria por su id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.CategoryController.GetAllCategoriesAsync">
            <summary>
            Endpoint para obtener todas las categorias
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.CategoryController.DeleteCategoryAsync(System.Int32)">
            <summary>
            Endpoint para eliminar una categoria
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.EventsController">
            <summary>
            Controlador de eventos
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.#ctor(Expo_Management.API.Application.Contracts.Repositories.IEventsRepository)">
            <summary>
            Constructor del controlador de eventos
            </summary>
            <param name="eventsRepository"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.GetEvents">
            <summary>
            Endpoint para obtener los eventos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.GetEvents(System.Int32)">
            <summary>
            Endpoint para obtener un solo evento
            </summary>
            <param name="EventId"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.CreateEvent(Expo_Management.API.Domain.Models.InputModels.EventInputModel)">
            <summary>
            Endpoint para crear un evento
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.UpdateEvent(Expo_Management.API.Domain.Models.InputModels.EventUpdateInputModel)">
            <summary>
            Endpoint para actualizar un evento
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.DeleteEvent(System.Int32)">
            <summary>
            Endpoint para eliminar un evento
            </summary>
            <param name="EventId"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.GetKindEvents">
            <summary>
            Endpoint para obtener los tipos de evento
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.GetColorName">
            <summary>
            Endpoint para crear un tipo de evento
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.CreateKindEvent(Expo_Management.API.Domain.Models.InputModels.newKindEventInputModel)">
            <summary>
            Endpoint para crear un tipo de evento
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.UpdateKindEvent(Expo_Management.API.Domain.Models.InputModels.UpdateKindEventsInputModel)">
            <summary>
            Endpoint para actualizar un evento
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.DeleteKindEvent(System.Int32)">
            <summary>
            Endpoint para eliminar un evento
            </summary>
            <param name="KindEventId"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.EventsController.GetSecurityProtocols(System.Int32)">
            <summary>
            Endpoint para obtener los protocolos de seguridad de la feria
            </summary>
            <param name="FairId"></param>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.FairsController">
            <summary>
            Controlador de ferias
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.FairsController.#ctor(Expo_Management.API.Application.Contracts.Repositories.IFairRepository)">
            <summary>
            Constructor del controlador de ferias
            </summary>
            <param name="fairRepository"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.FairsController.AddFair">
            <summary>
            Metodo para a침adir una feria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.FairsController.DeleteCategoryAsync(System.Int32)">
            <summary>
            Endpoint para eliminar una feria
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.FairsController.GetCurrentFair">
            <summary>
            Metodo para obtener la feria actual
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.FairsController.GetLeftDaysFair">
            <summary>
            Metodo para obtener los dias restantes de la feria actual
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.FairsController.ShowFairs">
            <summary>
            Metodo para obtener todas las ferias
            </summary>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.LogsController">
            <summary>
            Controlador de logs
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.LogsController.#ctor(Expo_Management.API.Application.Contracts.Repositories.ILogsRepository)">
            <summary>
            Constructor del controlador de logs
            </summary>
            <param name="logs"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.LogsController.GetLogs">
            <summary>
            Endpoint para obtener los logs
            </summary>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.ProjectsController">
            <summary>
            Controlador para proyectos
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.#ctor(Expo_Management.API.Application.Contracts.Repositories.IProjectsRepository,Microsoft.Extensions.Logging.ILogger{Expo_Management.API.Controllers.ProjectsController})">
            <summary>
            Constructor del controlador de proyectos
            </summary>
            <param name="projectsRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.AddProjects(Expo_Management.API.Domain.Models.InputModels.NewProjectInputModel)">
            <summary>
            Endpoint para a침adir proyectos
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.ShowProjects">
            <summary>
            Endpoint para mostrar proyectos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.removeUserFromProject(System.String)">
            <summary>
            Endpoint para eliminar a un usuario de su grupo de proyecto de Feria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.showOldProjects">
            <summary>
            Endpoint para mostrar los proyectos antiguos
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Expo_Management.API.Controllers.ProjectsController.getProjectQualificationAsync(System.Int32)" -->
        <member name="M:Expo_Management.API.Controllers.ProjectsController.CreateProjectClaim(Expo_Management.API.Domain.Models.InputModels.NewClaimInputModel)">
            <summary>
            Endpoint para crear los reclamos
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.postRecommendation(Expo_Management.API.Domain.Models.InputModels.NewRecommendationInputModel)">
            <summary>
            Endpoint para crear las recomendaciones
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.getRecommendation(System.Int32)">
            <summary>
            Endpoint para obtener las recomendaciones
            </summary>
            <param name="recomendacion"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetProjectMembers">
            <summary>
            Endpoint para obtener los miembros del proyecto
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetMembersEmail(System.Int32)">
            <summary>
            Endpoint para obtener los correos de los miembros de un proyecto
            </summary>
            <param name="projectId"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.getRecommendationByProjectId(System.Int32)">
            <summary>
            Endpoint para obtener la recomendacion de un proyecto
            </summary>
            <param name="projectId"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.qualifyProject(System.Int32,System.String)">
            <summary>
            Endpoint para validar la calificacion del proyecto
            </summary>
            <param name="ProjectId"></param>
            <param name="JudgeEmail"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.qualifyProject(Expo_Management.API.Domain.Models.InputModels.QualifyProjectInputModel)">
            <summary>
            Endpoint para calificar proyectos
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetProjectQualifications(System.Int32)">
            <summary>
            Endpoint para obtener las calificaciones del proyecto
            </summary>
            <param name="projectId"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetProjectsByYear">
            <summary>
            Endpoint para obtener los proyectos por a침o
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetProjectsByCategory">
            <summary>
            Endpoint para obtener los proyectos por categoria
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetProjectsByQualifications">
            <summary>
            Endpoint para obtener los proyectos por las calificaciones
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProjectsController.GetUsersPerProject">
            <summary>
            Endpoint para obtener los usurios por los proyectos
            </summary>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.ProtocolsController">
            <summary>
            Controlador de protocolos de seguridad de la feria
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProtocolsController.#ctor(Expo_Management.API.Application.Contracts.Repositories.IProtocolsRepository)">
            <summary>
            Constructor del controlador de categorias
            </summary>
            <param name="protocolRepository"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProtocolsController.CreateProtocolAsync(System.String)">
            <summary>
            Endpoint para crear protocolos de la feria
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.ProtocolsController.DeleteProtocolAsync(System.Int32)">
            <summary>
            Endpoint para eliminar un protocolo de seguridad de la feria
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Expo_Management.API.Controllers.UsersController">
            <summary>
            Controlador de usuarios
            </summary>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Expo_Management.API.Domain.Models.Entities.User},Expo_Management.API.Application.Contracts.Repositories.IUsersRepository,Microsoft.Extensions.Logging.ILogger{Expo_Management.API.Controllers.UsersController})">
            <summary>
            Constructor del controlador de usuarios
            </summary>
            <param name="userManager"></param>
            <param name="userRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetUserFullname(System.String)">
            <summary>
            Endopoint para obtener el nombre completo del usuario
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetJudgesAsync">
            <summary>
            Endpoint para obtener los jueces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetJudgeAsync(System.String)">
            <summary>
            Endpoint para obtener un juez por el email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.UpdateJudgeAsync(Expo_Management.API.Domain.Models.InputModels.UpdateJudgeInputModel)">
            <summary>
            Endpoint para actualizar un juez
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.DeleteJudgeAsync(System.String)">
            <summary>
            Endpoint para eliminar un juez
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetAdminsAsync">
            <summary>
            Endpoint para obtener los profesores
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetAdminAsync(System.String)">
            <summary>
            Endpoint para obtener un profesor por el email
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.UpdateAdminAsync(Expo_Management.API.Domain.Models.InputModels.UpdateUserInputModel)">
            <summary>
            Endpoint para actualizar un profesor
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.DeleteAdminAsync(System.String)">
            <summary>
            Endpoint para eliminar un profesor
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetStudentsAsync">
            <summary>
            Endpoint para obtener los estudiantes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.GetStudentAsync(System.String)">
            <summary>
            Endpoint para obtener un estudiante por el correo
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.UpdateStudentAsync(Expo_Management.API.Domain.Models.InputModels.UpdateUserInputModel)">
            <summary>
            Endpoint para actualizar un estudiante
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Expo_Management.API.Controllers.UsersController.DeleteStudentAsync(System.String)">
            <summary>
            Endpoint para eliminar un estudiante
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="T:UploadFiles.Controllers.FilesController">
            <summary>
            Controlador de archivos
            </summary>
        </member>
        <member name="M:UploadFiles.Controllers.FilesController.#ctor(Expo_Management.API.Application.Contracts.Repositories.IFilesUploaderRepository,Microsoft.Extensions.Logging.ILogger{UploadFiles.Controllers.FilesController})">
            <summary>
            Constructor del controlador de archivos
            </summary>
            <param name="filesUploaderRepository"></param>
            <param name="logger"></param>
        </member>
        <member name="M:UploadFiles.Controllers.FilesController.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Endpoint para subir un archivo
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:UploadFiles.Controllers.FilesController.DownladProjectFile(System.Int32)">
            <summary>
            Endpoint para descargar un archivo del proyecto
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UploadFiles.Controllers.FilesController.DownloadFile(System.Int32)">
            <summary>
            Endpoint para descargar un archivo
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UploadFiles.Controllers.FilesController.DeleteFile(System.Int32)">
            <summary>
            Endpoint para eliminar un archivo
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:UploadFiles.Controllers.FilesController.ShowFiles">
            <summary>
            Endpoint para ver los archivos
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
